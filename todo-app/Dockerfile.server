FROM golang:1.21-alpine AS builder

# Create group and user
RUN addgroup -g 10001 -S nonroot \
    && adduser -u 10000 -S -G nonroot -h /home/nonroot nonroot

# Set the working directory inside the container
WORKDIR /app

# Copy only necessary files for dependencies fetching
COPY go.mod go.sum ./

# Fetch dependencies first to leverage Docker caching
RUN go mod download

# Copy the rest of the application code
COPY . .

# Build the Go application with CGO disabled for a statically linked binary
# CGO_ENABLED=0: disables CGO for calling C code from Go, so that the compiler will
#   not use CGO and will only compile pure Go code. This can be useful when you want to
#   create a statically-linked binary that doesn't have external C dependencies.
# -o /app: This flag specifies the output file for the compiled binary.
# /main.go: This is the input source file for the go build command
RUN CGO_ENABLED=0 go build -o /app ./main.go

# Create group and user for non-root/unprivileged user
RUN addgroup -g 10001 -S nonroot \
    && adduser -u 10000 -S -G nonroot -h /home/nonroot nonroot

# Use a minimal base image for the final runtime container
FROM scratch AS app

# Copy only the necessary files from the builder image
COPY --from=builder /app /app

# Set the working directory inside the container
WORKDIR /app

# change to non-root user created in builder stage
USER nonroot

# Expose the port that your Go application will run on
EXPOSE 8000

# Run the executable
# ENTRYPOINT ["/app"]
CMD ["/app"]
